generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearchPostgres"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Industry {
  TECH_SOFTWARE
  FINANCE
  HEALTHCARE
  EDUCATION
  SUSTAINABILITY
  ECOMMERCE
  ENTERTAINMENT
  TRANSPORTATION
  FOOD
  REAL_ESTATE
  PRODUCTIVITY
  SOCIAL
}

enum Stage {
  IDEA
  MVP
  PRE_SEED
  SEED
  EARLY_STAGE
  GROWTH
  LATE_STAGE
  EXIT
}

enum TeamSize {
  ONE_TO_TEN
  TEN_TO_FIFTY
  FIFTY_TO_NINETY_NINE
  ONE_HUNDRED_OR_MORE
}

model User {
  id          String   @id @default(cuid())
  name        String?
  email       String   @unique
  description String?
  position    String?
  image       String?
  coverImage  String?
  urls        String[] @default([])
  skills      String[] @default([])

  Startup       Startup[]
  StartupMember StartupMember[]

  @@index([email])
}

model Startup {
  id         String   @id @default(cuid())
  name       String
  mission    String
  location   String?
  verified   Boolean  @default(false)
  stage      Stage
  industry   Industry
  teamSize   TeamSize
  image      String?
  coverImage String?
  skills     String[] @default([])
  createdBy  String

  user User @relation(fields: [createdBy], references: [id])

  StartupMember StartupMember[]
  StartupRole   StartupRole[]
  Milestone     Milestone[]
  Upvote        Upvote[]

  @@index([createdBy])
  @@index([industry])
  @@index([teamSize, industry, stage, verified])
  @@index([name, mission])
}

model Milestone {
  id          String   @id @default(cuid())
  title       String
  description String
  date        DateTime
  startupId   String

  startup Startup @relation(fields: [startupId], references: [id], onDelete: Cascade)

  @@index([startupId])
}

model Upvote {
  id        String @id @default(cuid())
  userId    String
  startupId String

  startup Startup @relation(fields: [startupId], references: [id], onDelete: Cascade)

  @@unique([userId, startupId])
}

model StartupRole {
  id        String   @id @default(cuid())
  name      String
  admin     Boolean  @default(false)
  startupId String
  createdAt DateTime @default(now())

  startup Startup @relation(fields: [startupId], references: [id], onDelete: Cascade)

  StartupMember StartupMember[]

  @@index([startupId])
}

model StartupMember {
  id        String   @id @default(cuid())
  startupId String
  userId    String
  roleId    String
  createdAt DateTime @default(now())

  startup Startup     @relation(fields: [startupId], references: [id], onDelete: Cascade)
  user    User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  role    StartupRole @relation(fields: [roleId], references: [id])

  @@unique([startupId, userId])
  @@index([startupId])
}
